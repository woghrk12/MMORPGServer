syntax = "proto3";
package tutorial;

option csharp_namespace = "Google.Protobuf.Protocol";

enum EMessageID
{
    CONNECTED_RESPONSE = 0;
    LOGIN_REQUEST = 1;
    LOGIN_RESPONSE = 2;
    CREATE_CHARACTER_REQUEST = 3;
    CREATE_CHARACTER_RESPONSE = 4;
    CHARACTER_ENTER_GAME_ROOM_REQUEST = 5;
    CHARACTER_ENTER_GAME_ROOM_RESPONSE = 6;
    CHARACTER_ENTER_GAME_ROOM_BROADCAST = 7;
    CHARACTER_LEFT_GAME_ROOM_REQUEST = 8;
    CHARACTER_LEFT_GAME_ROOM_RESPONSE = 9;
    CHARACTER_LEFT_GAME_ROOM_BROADCAST = 10;
    OBJECT_SPAWNED_BROADCAST = 11;
    OBJECT_DESPAWNED_BROADCAST = 12;
    UPDATE_CREATURE_STATE_BROADCAST = 13;
    MOVE_REQUEST = 14;
    MOVE_RESPONSE = 15;
    MOVE_BROADCAST = 16;
    PERFORM_ATTACK_REQUEST = 17;
    PERFORM_ATTACK_BROADCAST = 18;
    HIT_BROADCAST = 19;
    CREATURE_DEAD_BROADCAST = 20;
    CHARACTER_REVIVE_REQUEST = 21;
    CHARACTER_REVIVE_BROADCAST = 22;
}

enum EClientState
{
    DISCONNECTED = 0;
    CONNECTED = 1;
    LOBBY = 2;
    INGAME = 3;
}

enum EStatType
{
    OBJECT_DATA = 0;
    MONSTER_DATA = 1;
    ATTACK_DATA = 2;
    PROJECTILE_DATA = 3;
    ITEM_DATA = 4;
}

enum EGameObjectType
{
    CHARACTER = 0;
    MONSTER = 1;
    PROJECTILE = 2;
}

enum ECreatureState
{
    IDLE = 0;
    MOVE = 1;
    ATTACK = 2;
    DEAD = 3;
}

enum EMoveDirection
{
    NONE = 0;
    UP = 1;
    DOWN = 2;
    LEFT = 4;
    RIGHT = 8;
}

enum EItemType
{
    ITEM_TYPE_NONE = 0;
    ITEM_TYPE_WEAPON = 1;
    ITEM_TYPE_ARMOR = 2;
    ITEM_TYPE_CONSUMABLE = 3;
}

enum EWeaponType
{
    WEAPON_TYPE_NONE = 0;
    WEAPON_TYPE_SWORD = 1;
    WEAPON_TYPE_BOW = 2;
}

enum EArmorType
{
    ARMOR_TYPE_NONE = 0;
    ARMOR_TYPE_HELMET = 1;
    ARMOR_TYPE_CHEST = 2;
    ARMOR_TYPE_BOOTS = 3;
}

enum EConsumableType
{
    CONSUMABLE_TYPE_NONE = 0;
    CONSUMABLE_TYPE_POTION = 1;
}

message StatData
{
    EStatType statType = 1;
    string data = 2;
}

message LobbyCharacterInfo
{
    int32 characterID = 1;
    string name = 2;
    int32 level = 3;
}

message CreatureStat
{
    int32 level = 1;
    int32 totalExp = 2;
    int32 maxHP = 3;
    int32 curHP = 4;
    int32 attackPower = 5;
}

message CreatureInfo
{
    ECreatureState curState = 1;
    EMoveDirection moveDirection = 2;
    EMoveDirection facingDirection = 3;
    int32 moveSpeed = 4;
    CreatureStat stat = 5;
}

message ProjectileInfo
{
    EMoveDirection moveDirection = 1;
    int32 moveSpeed = 2;
}

message ObjectInfo
{
    int32 objectID = 1;
    string name = 2;
    int32 posX = 3;
    int32 posY = 4;
    bool isCollidable = 5;
    oneof objectType
    {
        CreatureInfo creatureInfo = 6;
        ProjectileInfo projectileInfo = 7;
    }
}

message ItemInfo
{
    int32 id = 1;
    int32 templateID = 2;
    int32 count = 3;
    int32 slot = 4;
}

message ConnectedResponse
{
    repeated StatData stats = 1;
}

message LoginRequest
{
    string id = 1;
}

// Result Code
// 0 : Success
// 1 : Create a new account because no account is found for the given ID
// 2 : Database error
message LoginResponse
{
    int32 resultCode = 1;
    repeated LobbyCharacterInfo characters = 2;
}

message CreateCharacterRequest
{
    string name = 1;
}

// Result Code
// 0 : Success
// 1 : The name already exists
// 2 : Receive information not present in the data sheet
// 3 : Database error
message CreateCharacterResponse
{
    int32 resultCode = 1;
    LobbyCharacterInfo newCharacter = 2;
}

message CharacterEnterGameRoomRequest
{
    int32 characterID = 1;
}

// Result Code
// 0 : Success
// 1 : Do not own a character with the specified name
// 2 : No character in the database
message CharacterEnterGameRoomResponse
{
    int32 resultCode = 1;
    ObjectInfo newCharacter = 2;
    repeated ObjectInfo otherObjects = 3;
    repeated ItemInfo items = 4;
}

message CharacterEnterGameRoomBroadcast
{
    ObjectInfo newCharacter = 1;
}

message CharacterLeftGameRoomRequest
{

}

message CharacterLeftGameRoomResponse
{

}

message CharacterLeftGameRoomBroadcast
{
    int32 leftCharacterID = 1;
}

message ObjectSpawnedBroadcast
{
    ObjectInfo newObjectInfo = 1;
}

message ObjectDespawnedBroadcast
{
    int32 oldObjectID = 1;
}

message UpdateCreatureStateBroadcast
{
    int32 creatureID = 1;
    ECreatureState newState = 2;
}

message MoveRequest
{
    EMoveDirection moveDirection = 1;
    int32 targetPosX = 2;
    int32 targetPosY = 3;
}

// Result Code
// 0 : Success
// 1 : The character's position needs to be fixed
message MoveResponse
{
    int32 resultCode = 1;
    int32 fixedPosX = 2;
    int32 fixedPosY = 3;
}

message MoveBroadcast
{
    int32 objectID = 1;
    EMoveDirection moveDirection = 2;
    int32 targetPosX = 3;
    int32 targetPosY = 4;
}

enum EAttackType
{
    MELEE = 0;
    RANGE = 1;
}

message PerformAttackRequest
{
    int32 AttackID = 1;
}

message PerformAttackBroadcast
{
    int32 creatureID = 1;
    int32 attackID = 2;
    EMoveDirection facingDirection = 3;
}

message HitBroadcast
{
    int32 attackerID = 1;
    int32 defenderID = 2;
    int32 remainHp = 3;
    int32 damage = 4;
}

message CreatureDeadBroadcast
{
    int32 creatureID = 1;
    int32 attackerID = 2;
}

message CharacterReviveRequest
{
    int32 characterID = 1;
}

message CharacterReviveBroadcast
{
    int32 characterID = 1;
    int32 revivePosX = 2;
    int32 revivePosY = 3;
}